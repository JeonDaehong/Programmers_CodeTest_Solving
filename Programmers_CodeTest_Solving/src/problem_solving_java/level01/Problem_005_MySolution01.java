package problem_solving_java.level01;

import java.util.ArrayList;

//풀이시간  : 2021-10-29 16:00 ~ 16:36
//결과	 	: 100.0 / 100.0 (정확성: 100.0)
/*나의 판단 : 풀어놓고 어떻게 풀었는지 넋이 나가있는 부분이 있기에, 공부해서 꼭 다시 풀어봅시다.
              특히, ArrayList의 remove는 없어질때마다 바로 당겨지니, k, k+1 인덱스를 제거하는 것이 아니라
              k 인덱스를 삭제하고, 당겨진 새로운 k인덱스를 삭제하는 느낌으로 k, k 인덱스를 제거하는 것이다.
              꼭 기억!
              그리고, 같은 인형이 2개가 되는 순간 없애려면, 아래 내 코드대로 하는게 맞지만
              문제에서는 그런 말이 없기에
              그냥 다 쌓아두고, 곂치는 걸 없애는 느낌으로 진행해도 됨.
*/

/*
 * <문제 제목> : 크레인 인형뽑기 게임
 
 
 * <문제> : 
 	→ 게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때,
 	  크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.
 
	class Solution {
    public int solution(int[][] board, int[] moves) {
        int answer = 0;
        return answer;
    }
}

 
 * <문제 설명> :
 	게임개발자인 "죠르디"는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.
	"죠르디"는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.
 	게임 화면은 "1 x 1" 크기의 칸들로 이루어진 "N x N" 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다.
 	각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다.
 	모든 인형은 "1 x 1" 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다.
 	게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다.
 	집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다.
 	
 	만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다.
 	
 	크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다.
 	또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다.
	
	
 * <제한사항> :
 	★ board 배열은 2차원 배열로 크기는 "5 x 5" 이상 "30 x 30" 이하입니다.
	★ board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.
		- 0은 빈 칸을 나타냅니다.
		- 1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다.
	★ moves 배열의 크기는 1 이상 1,000 이하입니다.
	★ moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.
	
		
 
 * <입.출력 예시>
	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	board															moves				result
	[[0,0,0,0,0],[0,0,1,0,3],[0,2,5,0,1],[4,2,4,4,2],[3,5,1,3,1]]	[1,5,3,5,1,2,1,4]	4
	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	
	★ 입출력 예 #1
		인형의 처음 상태는 문제에 주어진 예시와 같습니다.
		크레인이 [1, 5, 3, 5, 1, 2, 1, 4] 번 위치에서 차례대로 인형을 집어서 바구니에 옮겨 담은 후,
		상태는 아래 그림과 같으며 바구니에 담는 과정에서 터트려져 사라진 인형은 4개 입니다.
	
*/

class Problem_005_MySolution01 {

	public int solution(int[][] board, int[] moves) {
		
		ArrayList<Integer> basketList = new ArrayList<>();
		
		int answer = 0;
	
		for (int i=0; i<moves.length; i++) {
			for (int j=0; j<board.length; j++) {
				if (board[j][moves[i]-1] != 0) {
					basketList.add(board[j][moves[i]-1]);
					board[j][moves[i]-1] = 0;
					if (basketList.size() > 1) {
						for (int k=0; k<basketList.size()-1; k++)
						if (basketList.get(k) == basketList.get(k+1)) {
							basketList.remove(k);
							basketList.remove(k);
							answer += 2;
							k--;	// 2개를 지웠기 때문에, k--를 해준다.
						}
					}
					break;
				}
			}
		}		
        return answer;
    }
}

